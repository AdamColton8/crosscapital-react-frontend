import { authHeader } from '../_helpers';
import axios from 'axios';
import requestsUrl from 'projConfig'
import * as R from 'ramda'
export const authService = {
  login,
  logout,
  register,
  recoverPassword,
  resetPassword
};

function register(user) {
  return axios.post(requestsUrl.register, user)
    .then((response)=> {
      if (response.status !== 200) {
        return Promise.reject(response);
      }
      return response.data;
    });
}

function login(loginData) {
  const defaultBody = {
    "grant_type": "password",
    "client_id": "2",
    "client_secret": "595glY7Zl9tEBwQXVDHHhpCqyq2homtlW4kS8ujA",
    "scope": "*"
  };
  const requestOptions = R.merge(defaultBody, loginData);
  return axios.post(requestsUrl.login, requestOptions)
    .then(response => {
      if (response.status !== 200) {
        return Promise.reject(response.statusText);
      }
      return response.data;
    })
    .then(userToken => {
      // login successful if there's a jwt token in the response
      if (userToken && userToken.access_token) {
        userToken.expires_in = new Date().getTime() + userToken.expires_in * 1000;
        // store user details and jwt token in local storage to keep user logged in between page refreshes
        localStorage.setItem('user_token', JSON.stringify(userToken));
      }
      return Promise.resolve(userToken);
    });
}

function logout() {
  // remove user from local storage to log user out
  localStorage.removeItem('user_token');
}

function recoverPassword(payload) {
  return axios.post(requestsUrl.profileRecover.email, payload)
    .then(response => {
      if (response.status !== 200) {
        return Promise.reject(response);
      }
      return response.data;
    })
}

function resetPassword(payload) {
  return axios.post(requestsUrl.profileRecover.password, payload)
}