
import React from 'react';
import { propTypes, withFormsy } from 'formsy-react';

class WithFormsyCheckbox extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      touched: false
    };
    this.changeValue = this.changeValue.bind(this);
  }

  changeValue(event) {
    // setValue() will set the value of the component, which in
    // turn will validate it and the rest of the form
    this.props.setValue(event.target.checked ? event.target.checked : '')
    if (!event.target.checked) {
      this.handleTouched();
    }
  }

  handleTouched() {
    this.setState({
      touched:true
    })
  };

  componentDidMount () {
    // Only change to the new default value if it is currently showing the old one
    if (this.props.initialValue) {
      this.props.setValue(this.props.initialValue);
    }
  }

  render() {
    // Set a specific className based on the validation
    // state of this component. showRequired() is true
    // when the value is empty and the required prop is
    // passed to the input. showError() is true when the
    // value typed is invalid
    // const className = `form-group ${this.props.className} ${this.props.showRequired() ? 'required' : ''} ${this.props.showError() ? 'error' : ''}`;
    let {
      props: {
        className
      }
    } = this;
    // An error message is returned ONLY if the component is invalid
    // or the server has returned an error message
    const errorMessage = this.props.getErrorMessage();
    let {
      props: {
        placeholder
      }
    } = this;
    const value = this.props.getValue();
    return (
      <div >
        <input
          onChange={this.changeValue}
          name={this.props.name}
          type='checkbox'
          checked={value}
          data-checked={value}
          className={`${className} ${errorMessage || this.props.showRequired() && this.state.touched ? 'is-invalid': ''}`}/>
        {this.props.children}
        <div className="invalid-feedback"> { errorMessage || (this.props.showRequired() && this.state.touched ? 'This field is required':'')} </div>
      </div>
    );
  }
}

WithFormsyCheckbox.propTypes = {
  ...propTypes,
};

export default withFormsy(WithFormsyCheckbox);