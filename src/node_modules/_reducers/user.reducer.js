import {
  userDataConstants,
  userWalletsConstants,
  userDepositsConstants,
  userOperationsConstants,
  userWithdrawCancelConstants,
  userReferralsConstants, activatePlanConstants
} from '_constants';
import * as R from 'ramda'

const initialUserData = {
  wallet: []
};

export function userData(state = initialUserData, {type, payload}) {
  switch (type) {
    case userDataConstants.REQUEST:
      return state;
    case userDataConstants.SUCCESS:
      return payload;
    case userDataConstants.FAILURE:
      return {};
    default:
      return state
  }
}

export function userWallets(state = [], {type, payload}) {
  switch (type) {
    case userWalletsConstants.REQUEST:
      return state;
    case userWalletsConstants.SUCCESS:
      return payload;
    case userWalletsConstants.FAILURE:
      return [];
    default:
      return state
  }
}

export function userDeposits(state = [], {type, payload}) {
  switch (type) {
    case userDepositsConstants.REQUEST:
      return state;
    case userDepositsConstants.SUCCESS:
      return payload;
    case userDepositsConstants.NEW_PLAN:
      let newState = R.clone(state);
      newState[payload.plan_id] = R.concat(newState[payload.plan_id], [payload]);
      return newState;
    case userDepositsConstants.FAILURE:
      return [];
    default:
      return state
  }
}

export function userOperations(state = [], {type, payload}) {
  switch (type) {
    case userOperationsConstants.REQUEST:
      return state;
    case userOperationsConstants.SUCCESS:
      return payload;
    case userOperationsConstants.NEW_OPERATION:
      return R.concat([payload],state);
    case userWithdrawCancelConstants.SUCCESS:
      state[payload].status = 'canceled';
      return state;
    case userOperationsConstants.FAILURE:
      return [];
    default:
      return state
  }
}

export function userReferrals(state = [], {type, payload}) {
  switch (type) {
    case userReferralsConstants.REQUEST:
      return state;
    case userReferralsConstants.SUCCESS:
      return payload;
    case userReferralsConstants.FAILURE:
      return [];
    default:
      return state
  }
}