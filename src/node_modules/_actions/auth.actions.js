import { authConstants } from '_constants';
import { authService } from '_services';
import { alertActions } from '_actions';

export const authActions = {
  login,
  logout,
  register,
  forgotPassword,
  resetPassword,
  logoutAction
};

function login(username, password) {
  return dispatch => {
    return new Promise((resolve,reject)=> {
      dispatch(request({username}));

      authService.login(username, password)
        .then(
          user => {
            dispatch(success(user));
            dispatch(alertActions.success('Successfully authorized'));
            resolve('200');
          },
          error => {
            let message = 'Invalid credentials';
            dispatch(failure(message));
            dispatch(alertActions.error(message));
          }
        );
    });
  };

  function request(user) { return { type: authConstants.LOGIN_REQUEST, user } }
  function success(user) { return { type: authConstants.LOGIN_SUCCESS, user } }
  function failure(error) { return { type: authConstants.LOGIN_FAILURE, error } }
}

function register(user) {
  return dispatch => {
    return new Promise((resolve,reject)=> {
      dispatch(request(user));

      authService.register(user)
        .then(
          res => {
            dispatch(success());
            dispatch(alertActions.success('Registration successful'));
            resolve('200');
          })
        .catch( ({data}) => {
          let error = data.errors[Object.keys(data.errors)[0]];
          dispatch(failure(error));
          dispatch(alertActions.error(error));
        });
    });
    function request(user) { return { type: authConstants.REGISTER_REQUEST, user } }
    function success(user) { return { type: authConstants.REGISTER_SUCCESS, user } }
    function failure(error) { return { type: authConstants.REGISTER_FAILURE, error } }
  };
}

function forgotPassword(payload) {
  return dispatch => {
    return new Promise((resolve,reject)=> {
      dispatch(request());

      authService.recoverPassword(payload)
        .then(
          res => {
            dispatch(success());
            dispatch(alertActions.success('The activation link was sent to your email'));
            resolve('200');
        })
        .catch(function ({data}) {
          let error = data.errors[Object.keys(data.errors)[0]];
          dispatch(failure(error));
          dispatch(alertActions.error(error));
        });
    });
  };

  function request() { return { type: authConstants.FORGOT_PASSWORD_REQUEST } }
  function success() { return { type: authConstants.FORGOT_PASSWORD_SUCCESS } }
  function failure() { return { type: authConstants.FORGOT_PASSWORD_FAILURE } }
}

function resetPassword(payload) {
  return dispatch => {
    return new Promise((resolve,reject)=> {
      dispatch(request());

      authService.resetPassword(payload)
        .then(
          user => {
            dispatch(success());
            dispatch(alertActions.success('Your password was successfully changed'));
            resolve('200');
          },
          error => {
            dispatch(failure());
            dispatch(alertActions.error(error));

          }
        );
    });
  };

  function request() { return { type: authConstants.RESET_PASSWORD_REQUEST } }
  function success() { return { type: authConstants.RESET_PASSWORD_SUCCESS } }
  function failure() { return { type: authConstants.RESET_PASSWORD_FAILURE } }
}

function logoutAction() {
  return dispatch => {
    return new Promise((resolve,reject)=> {
      authService.logout();
      dispatch({ type: authConstants.LOGOUT });
    });
  };

}


function logout() {
  authService.logout();
  return { type: authConstants.LOGOUT };
}

// prefixed function name with underscore because delete is a reserved word in javascript
function _delete(id) {
  return dispatch => {
    dispatch(request(id));

    authService.delete(id)
      .then(
        user => {
          dispatch(success(id));
        },
        error => {
          dispatch(failure(id, error));
        }
      );
  };

  function request(id) { return { type: authConstants.DELETE_REQUEST, id } }
  function success(id) { return { type: authConstants.DELETE_SUCCESS, id } }
  function failure(id, error) { return { type: authConstants.DELETE_FAILURE, id, error } }
}