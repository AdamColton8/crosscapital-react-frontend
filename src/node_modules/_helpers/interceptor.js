import axios from 'axios';
import {domain} from 'projConfig'
import { requestActions } from '_actions'
import {history, store } from 'store'
import { authActions } from '_actions'

export const axiosInterceptor = () => {
  let _domain = domain;


  axios.interceptors.request.use(function (config) {
    // Do something before request is sent
    store.dispatch(requestActions.inProcess());

    const userAuth = localStorage.getItem('user_token');
    if (userAuth) {
      let token = JSON.parse(userAuth).access_token;
      config.headers.Authorization = `Bearer ${token}`;
    }
    config.headers.common.ContentType = 'application/json';
    config.headers.common.Accept = 'application/json';
    // config.url = _domain+config.url;
    return config;
  }, function (error) {
    // Do something with request error
    return Promise.reject(error);
  });

  axios.interceptors.response.use(function (response) {
    store.dispatch(requestActions.completed());
    return response;
  }, function (error) {
    store.dispatch(requestActions.completed());
    let errorResponse = error.response;
    let errorData = errorResponse.data;
    if (errorResponse.status == 401 && errorData.errorEnum == "TOKEN_EXPIRED") {
      store.dispatch(authActions.logout());
      console.log(error.response);
    }
    return error.response;
  });
};