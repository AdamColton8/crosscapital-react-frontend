import React, {Component} from 'react'
import Slider from 'react-rangeslider'
import {authActions} from "_actions/auth.actions";
import {connect} from "react-redux";
import { debounce } from "lodash.debounce";
import {Dropdown, DropdownItem, DropdownMenu, DropdownToggle} from "reactstrap";
import { toFloatNumbers } from '_helpers'

class ProfitCalculator extends Component {
  constructor(props){
    super(props);
    this.state = {
      amount: 0,
      choosedPlan: false,
      planDropdown: false,
    };

    this.firstCalc = false;
    this.handleChange = this.handleChange.bind(this);

  }

  componentDidMount(){
    if (this.props.tradePlans[0] && !this.firstCalc) {
      this.firstCalc = true;
      this.handlePlanChange(this.props.tradePlans[0]);
    }
  }

  componentDidUpdate(prevProps, prevState){

    if (this.props.tradePlans[0] && !this.firstCalc) {
      this.firstCalc = true;
      this.handlePlanChange(this.props.tradePlans[0]);
    }
    if (this.state.choosedPlan && prevState.choosedPlan.id!== this.state.choosedPlan.id) {
      this.handleChangeSliderValue(this.state.choosedPlan.deposit_min);
    }
  }

  toggleDropdown = () => {
    this.setState({
      planDropdown: !this.state.planDropdown
    })
  };

  handleChangeStart = () => {
    console.log('Change event started')
  };

  handleChangeSliderValue = value => {
    let {
      state: {
        choosedPlan
      }
    } = this;
    let { tradePlans } = this.props;
    value = +value;
    value = value >= choosedPlan.deposit_min ? value : choosedPlan.deposit_min;
    if (value < choosedPlan.deposit_min && value > choosedPlan.deposit_max) {
      return false;
    }
    this.recalculateValues(value);
  };

  handleChange = event => {
    let { choosedPlan } = this.state;
    let value = +event.target.value;
    if (!value) {
      this.setState({
        amount: ''
      });
      return;
    } else if (value > choosedPlan.deposit_max) {
      value = choosedPlan.deposit_max;
    }
    this.recalculateValues(value);
  };



  recalculateValues(value){
    let { choosedPlan } = this.state;

    let newState = {
      amount: value
    };

    newState.profit = newState.amount * (choosedPlan.percent / 100); // зароботок
    newState.profit = toFloatNumbers(newState.profit) || 0;
    newState.total = newState.profit + newState.amount; // прибыль всего
    newState.perDay = newState.profit / choosedPlan.term ;  // прибыль в день
    newState.perDay = toFloatNumbers(newState.perDay) || 0;

    this.setState(newState)
  }

  handleChangeComplete = () => {
    console.log('Change event completed')
  };

  handlePlanChange = (plan) => {
    this.setState({
      choosedPlan: plan
    })
  };

  render () {
    const {
      handleChange,
      handleChangeSliderValue,
      handleChangeStart,
      handleChangeComplete,
      handlePlanChange,
      toggleDropdown,
      props: {
        tradePlans
      },
      state: {
        amount,
        choosedPlan,
        choosedPlan: {
          id,
          // name,
          percent,
          term,
          deposit_min,
          deposit_max,
        },
        profit,
        perDay,
        planDropdown,
        total
      }
    } = this;
    return(
      <div>
        <p className="mb-0 text-light-grey ui-fz-18">Deposit amount</p>
        <label className="value-amount d-block">
          <div className="input" data-currency="€">
            <input className="form-control form-control-lg w-100" id="calc__input" type="text" value={amount} onChange={handleChange}/>
          </div>
          <div id="calc__slider">
            {
              choosedPlan && // если у нас есть тарифы тогда рендерим слайдер
              <Slider
                min={ choosedPlan.deposit_min }
                max={ choosedPlan.deposit_max }
                value={ amount }
                onChangeStart={handleChangeStart}
                onChange={handleChangeSliderValue}
                onChangeComplete={handleChangeComplete}
              />
            }
          </div>
        </label>
        <dl className="ui-fz-18 text-dark">
          <div className="line net-profit d-flex">
            <dt className="text-light-grey mr-1">Invest plan:</dt>
            <dd className="flex-1 " id="calc__plan">
              <Dropdown group isOpen={planDropdown} size="lg" toggle={toggleDropdown}>
                <DropdownToggle className="user__block d-flex align-items-center cu-pointer profit-calculator__plan" href="#" tag="div" onClick={toggleDropdown}>
                  <span className="text-orange mr-1 d-inline-block">{choosedPlan.name}</span>
                </DropdownToggle>
                <DropdownMenu>
                  {
                    tradePlans.map((plan, i) =>{
                      return (
                        <DropdownItem href={"#"}
                           key={i}
                           className={`cu-pointer d-block`}
                           onClick={(e)=> {e.preventDefault(); handlePlanChange(plan)}}>
                          { plan.name }
                        </DropdownItem>
                      )
                    })
                  }
                </DropdownMenu>
              </Dropdown>
              </dd>
          </div>
          <div className="calc__divider" style={{margin: '15px 0 23px'}} />
          <div className="line net-profit d-flex">
            <dt className="text-light-grey mr-1 text">Net profit:</dt>
            <dd className="flex-1" id="calc__net-profit">{percent} %</dd>
          </div>
          <div className="line period d-flex">
            <dt className="text-light-grey mr-1">Period:</dt>
            <dd className="flex-1" id="calc__period">{term} Days</dd>
          </div>
          <div className="line amount d-flex">
            <dt className="text-light-grey mr-1">Amount: </dt>
            <dd className="flex-1" id="calc__amount">
              From <span>{deposit_min || 0}</span> to <span>{deposit_max || 0}</span> Euro
            </dd>
          </div>
          <div className="calc__divider" style={{margin: '19px 0 22px'}} />
          <div className="line profit__summary d-flex">
            <dt className="ui-fz-22 text-dark">Your profit:</dt>
            <dd className="flex-1 ui-fz-24 text-success font-weight-bold" id="calc__profit__summary">{profit} €</dd>
          </div>
          <div className="line profit__per-day d-flex">
            <dt className="text-light-grey">Profit per day:</dt>
            <dd className="flex-1 text-light-grey" id="calc__profit__per-day">{perDay} €</dd>
          </div>
          <div className="line profit__per-day d-flex">
            <dt className="text-light-grey">Total:</dt>
            <dd className="flex-1 text-light-grey" id="calc__profit__per-day">{total} €</dd>
          </div>
        </dl>
      </div>
    )
  }
}

function mapStateToProps(state) {
  return {
    tradePlans: state.tradePlans
  };
}

const _ProfitCalculator = connect(mapStateToProps,{
  login: authActions.login,
  logout: authActions.logout
})(ProfitCalculator);
export default _ProfitCalculator;
