import React,{Component} from 'react'
import {Link} from "react-router";
import {userActions} from "_actions";
import {connect} from "react-redux";
import PropTypes from 'prop-types'
import { toFloatNumbers } from '_helpers'
import {tradePlans} from "_reducers/trade.plans.reducer";
import {Modal} from "reactstrap";

import icoPerfect_money from "img/icons/pay-systems/pm.png"
import icoAdvanced_cash from "img/icons/pay-systems/adv_cash.png"
import icoPayeer from "img/icons/pay-systems/py.png"

let PaymentSystemsIcons = {
  perfect_money: icoPerfect_money,
  advanced_cash: icoAdvanced_cash,
  payeer: icoPayeer
};

class ProfileWithdrawals extends Component {
  constructor(props) {
    super(props);

    this.state = {
      activatePopup: false,
      planData: {
        payment_alias: "perfect_money",
        initial_money: 0,
        plan_id: false
      }
    };

    this.toggleActivatePlan = this.toggleActivatePlan.bind(this);
  }

  toggleActivatePlan(id){
    let newState = {
      activatePopup: !this.state.activatePopup
    };

    if (id) {
      let newPlanData = this.state.planData;
      newPlanData.plan_id = id;
      newState.planData = newPlanData;
    }

    this.setState(newState);
  }

  componentDidMount(){
    this.props.fetchUserWithdrawals()
  }

  cancelWithdraw = (e, id, i)=> {
    e.preventDefault();
    this.props.cancelUserWithdraw({id: id}, i)
      .then(
        withdraw => {
          this.props.fetchUserWallets()
        },
        error => {}
      );
    return false;
  };

  statusCaseRender(status){
    switch (status){
      case 'done':
        return 'text-success';
      case 'pending':
        return 'text-warning';
      default:
        return 'text-secondary'
    }
  }

  render() {
    let  {
      toggleActivatePlan,
      cancelWithdraw,
      statusCaseRender
    } = this;
    let { activatePopup } = this.state;

    let {
      userOperations
    } = this.props;

    return (
      <div className='row'>
        <div className="col-12">
          <div className="user-profile__table user-withdraws__table table-responsive">
            <table className="w-100">
              <thead className="text-secondary">
              <tr>
                <th className="font-weight-normal">Тип операции</th>
                <th className="font-weight-normal">Сумма</th>
                <th className="font-weight-normal">Дата</th>
                <th className="font-weight-normal">Статус</th>
                <th className="font-weight-normal">Платёжная система</th>
                <th className="font-weight-normal" />
              </tr>
              </thead>
              <tbody>
                {
                  userOperations.length > 0 ? userOperations.map((operation, i)=>{
                    return(
                      <tr className="table_row" key={`operation_${i}`}>
                        <td className={`type_td ${operation.type === 'refill' ? 'text-success':'text-danger'} pr-3`}>
                          <span>{operation.type}</span>
                        </td>
                        <td className="sum_td pr-3">
                          <span>
                            {operation.type === 'refill' ? operation.sum+" $" : '-'+operation.sum+' $' }
                          </span>
                        </td>
                        <td className="date_td pr-3">
                          <span>{operation.date}</span>
                        </td>
                        <td
                          className={`status_td pr-3 ${statusCaseRender(operation.status)}`}
                        >
                          <span>{operation.status}</span>
                        </td>
                        <td className="pay-system_td pr-3">
                          <div className="d-flex align-items-center">
                            <span className="d-inline-block align-middle mr-2">
                              <img className="d-block rounded-circle" src={PaymentSystemsIcons[operation.payment.alias]} width={24} />
                            </span>
                            <span className="d-inline-block align-middle amount text-dark">{operation.payment.title}</span>
                          </div>
                        </td>
                        <td className="command_td">
                          {
                            operation.status === 'pending' &&
                            <a className="cancel-withdraw p-2 d-block"
                               href="#"
                               title="Cancel withdrawal"
                               onClick={(e)=>cancelWithdraw(e,operation.id, i)}>x</a>
                          }
                        </td>
                      </tr>
                    )
                  }) : <tr/>
                }
              </tbody>
            </table>
          </div>
        </div>
      </div>
    )
  }
}


ProfileWithdrawals.contextTypes = {
  router: PropTypes.shape({}),
};

function mapStateToProps(state) {
  const { loggingIn } = state.authentication;
  return {
    userOperations: state.userOperations
  };
}

const _ProfileWithdrawals = connect(mapStateToProps,{
  fetchUserWithdrawals: userActions.fetchUserWithdrawals,
  cancelUserWithdraw: userActions.cancelUserWithdraw,
  fetchUserWallets: userActions.fetchUserWallets
})(ProfileWithdrawals);

export default _ProfileWithdrawals;
