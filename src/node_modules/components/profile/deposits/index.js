import React,{Component} from 'react'
import {Link} from "react-router";
import {requestActions, userActions} from "_actions";
import {connect} from "react-redux";
import PropTypes from 'prop-types'
import { toFloatNumbers } from '_helpers'
import {tradePlans} from "_reducers/trade.plans.reducer";
import {Modal} from "reactstrap";
import {ValidatedCheckbox, ValidatedInput} from "_components";
import { BaseForm as ValidatedForm} from 'react-validify'
import * as R from 'ramda'
import moment from 'moment';
import { paymentSystemService } from '_services';
import { paymentSystemsReplenishUrls } from 'projConfig'
import axios from 'axios'
import DepositCard from '_components/depositCard'


import WithFormsyInput from "_components/WithFormsyInput";
import WithFormsyCheckbox from "_components/WithFormsyCheckbox";
import Formsy from 'formsy-react';
import icoPerfect_money from "img/icons/pay-systems/pm.png"
import icoAdvanced_cash from "img/icons/pay-systems/adv_cash.png"
import icoPayeer from "img/icons/pay-systems/py.png"
import icoReferrals from "img/icons/pay-systems/bonus.png"
import icoBonus from "img/icons/pay-systems/bonus.png"

let PaymentSystemsIcons = {
    perfect_money: icoPerfect_money,
    advanced_cash: icoAdvanced_cash,
    payeer: icoPayeer,
    referrals: icoReferrals,
    bonus: icoBonus
};

class ProfileDeposits extends Component {
  constructor(props) {
    super(props);

    this.state = {
      canSubmit: false,
      activatePopup: false,
      planData: {
        payment_alias: "perfect_money",
        initial_money: 0,
        plan_id: 1,
        activateFromBalance: ''
      },
      planErrors: {
        payment_alias: "",
        initial_money: '',
        plan_id: ''
      },
      formActivateAction: '',
      formInputs: {
      }
    };

    this.toggleActivatePlan = this.toggleActivatePlan.bind(this);
  }

  toggleActivatePlan(id){
    let newState = {
      activatePopup: !this.state.activatePopup
    };
    console.log(id);
    if (id) { // прикрепляем id тарифного плана
      let newPlanData = this.state.planData;
      console.log(newPlanData);
      newPlanData.plan_id = id;
      newState.planData = newPlanData;
      newState.initial_money = this.props.tradePlans[id-1].deposit_min;
    }
    console.log('newState',newState);
    this.setState(newState);
  }

  toggleActivateFromBalance = ()=>{
    this.setState({
      activateFromBalance: !this.state.activateFromBalance
    })
  };

  componentDidMount(){
    this.props.fetchUserDeposits();
  }

  componentDidUpdate(){
    let _this = this;
    if (this.state.formActivateAction) {
      setTimeout(()=>{
        // debugger;
        _this.hiddenForm.submit();
      },2000)
    }
  }

  renderDepositTerms(start, end) {
    start = moment(start);
    let passed = moment().diff(start, 'days');
    let duration = moment(end).diff(start, 'days'); // 1
    return passed+'/'+duration;  // 55 / 100 days template
  }

  handleActivatePlanRequest = (data) => { // запрос на активацию
    let payload;
    let _this = this;
    if (data.activateFromBalance) { // из кошелька
      payload = Object.assign(this.state.planData, data);
      _this.props.activatePlanFromBalance(payload)
        .then(
          res => {
            _this.props.fetchUserWallets();
            _this.setState({
              activatePopup: !_this.state.activatePopup
            })

              setTimeout(()=>{
                  _this.props.fetchUserDeposits();
                  console.log(121);
              },500)
          },
          error => {}
        );
    } else { // из платежки

      paymentSystemService.fetchPaymentData({
        payment_alias: this.state.planData.payment_alias,
        amount: data.initial_money,
        plan_id: _this.state.planData.plan_id
      }).then( ( {data: { action, fields } } ) =>{
        _this.props.dispatchRequestInProcess(); // включаэм лойдер чтобы пользователь понимал что запрос еще не окончен, и что то происходит

        _this.hiddenForm.attributes.action.value = action;
        _this.setState({
          formActivateAction: action,
          formInputs: fields
        });
      })
    }
  };

  handlePlanSystemChange = (alias) =>{
    let planData = {...this.state.planData};
    planData.payment_alias = alias;
    this.setState({
      planData,
    })
      console.log(this.state);
  };

  handleChange = (values) => {
    this.setState({ planData: values.values });
  };

  handleErrorChange = (errors) => {
    const planErrors  = R.merge(this.state.planErrors, errors.errors);
    this.setState({ planErrors });
  };

  enableButton = () => {
    this.setState({ canSubmit: true });
  };

  disableButton = () => {
    this.setState({ canSubmit: false });
  };

  render() {
    let  {
      toggleActivatePlan,
      renderDepositTerms,
      handleActivatePlanRequest,
      handlePlanSystemChange,
      toggleActivateFromBalance,
      enableButton,
      disableButton,
      props: {
        userWallets,
        tradePlans: [plan1, plan2, plan3],
        tradePlans,
        userDeposits: {1: depositType1, 2:depositType2, 3:depositType3}
      },
      state: {
        activatePopup,
        planData,
        planErrors,
        formActivateAction,
        formInputs,
        canSubmit
      }
    } = this;



    let payment_alias   =   this.state.planData.payment_alias;
    let minDepositValue = tradePlans.length ? tradePlans[planData.plan_id-1].deposit_min :0;
    let maxDepositValue = tradePlans.length ? tradePlans[planData.plan_id-1].deposit_max :5;

    return (
      <div className='row'>
        <div className="col-md-4">
          {
            plan1 &&
            <div className="project-card__block">
              <div className="project__title d-flex justify-content-between align-items-center">
                <span className="h3 font-weight-light text-capitalize">{plan1.name}</span>
              </div>
              <div className="project__descr text-light-grey ui-fz-14 d-flex flex-column">
                {plan1.description}
                  <span>
                    50 days
                  </span>
                <span>
                  135 %
                </span>
                  <span>
                    From 10 to 500 €
                  </span>
              </div>
              <a className="btn btn btn-success w-100 text-uppercase lh-27 mt-auto" href="#"
                 onClick={
                   (e)=>{
                     e.preventDefault();
                     toggleActivatePlan(plan1.id)
                   }
                 }
              >
                ACTIVATE now
              </a>
            </div>
          }

          { depositType1 &&
            depositType1.map((deposit, i)=>{
              return (
                <DepositCard
                  tradePlan={tradePlans[deposit.plan_id-1]}
                  deposit={deposit}
                  index={i}
                  key={`depo1_${i}`}
                />
              );

            })
          }

        </div>
        <div className="col-md-4">
          {
            plan2 &&
            <div className="project-card__block">
              <div className="project__title d-flex justify-content-between align-items-center">
                <span className="h3 font-weight-light text-capitalize">{plan2.name}</span>
              </div>
              <div className="project__descr text-light-grey ui-fz-14 d-flex flex-column">
                {plan2.description}
                  <span>
                   100 days
                  </span>
                  <span>
                  155 %
                </span>
                  <span>
                    From 500 to 1000 €
                  </span>
              </div>
              <a className="btn btn btn-success w-100 text-uppercase lh-27 mt-auto" href="#"
                 onClick={
                   (e)=>{
                     e.preventDefault();
                     toggleActivatePlan(plan2.id)
                   }
                 }
              >
                ACTIVATE now
              </a>
            </div>
          }

          { depositType2 &&
          depositType2.map((deposit, i)=>{
            return (
              <DepositCard
                tradePlan={tradePlans[deposit.plan_id-1]}
                deposit={deposit}
                index={i}
                key={`depo2_${i}`}
              />
            );
          })
          }

        </div>
        <div className="col-md-4">
          {
            plan3 &&
            <div className="project-card__block">
              <div className="project__title d-flex justify-content-between align-items-center">
                <span className="h3 font-weight-light text-capitalize">{plan3.name}</span>
              </div>
              <div className="project__descr text-light-grey ui-fz-14 d-flex flex-column">
                {plan3.description}
                  <span>
                   200 days
                  </span>
                  <span>
                  205 %
                </span>
                  <span>
                    From 1000 to 7000 €
                  </span>
              </div>
              <a className="btn btn btn-success w-100 text-uppercase lh-27 mt-auto" href="#"
                 onClick={
                   (e)=>{
                     e.preventDefault();
                     toggleActivatePlan(plan3.id)
                   }
                 }
              >
                ACTIVATE now
              </a>
            </div>
          }

          { depositType3 &&
          depositType3.map((deposit, i)=>{
            return (
              <DepositCard
                tradePlan={tradePlans[deposit.plan_id-1]}
                deposit={deposit}
                index={i}
                key={`depo3_${i}`}
              />
            );
          })
          }
        </div>
        <Modal isOpen={activatePopup} toggle={()=>toggleActivatePlan(false)}>
          <Formsy
            onSubmit={handleActivatePlanRequest}
            onValid={enableButton}
            onInvalid={disableButton}
          >
              <div className="modal-content">
                <div className="modal-header">
                  <h5 className="modal-title">Invest your <br /> money</h5>
                  <button className="close" type="button" data-dismiss="modal" aria-label="Close"
                          onClick={()=>toggleActivatePlan(false)}
                  >×</button>
                </div>
                <div className="modal-body">
                  <div className="text-secondary ui-fz-14">Add from</div>
                  <div className="payment__systems form-row">
                    {
                      userWallets && userWallets.slice(0,5).map((system, index)=>{
                        console.log(system , 'systemsystem')

                        return(
                            system.payment_alias === 'referrals' ? '' :
                            //userWallets,index === 2 ? '' :

                                <div
                            className="col-12 col-sm-4 payment-system__block"
                            key={index}
                            onClick={()=>{
                              handlePlanSystemChange(system.payment_alias)
                            }}
                          >
                            <div
                              className={`h-100 payment-system__wrap text-center  d-flex align-items-center flex-column
                                ${planData.payment_alias === system.payment_alias ? 'active':''}
                                ${userWallets.length && !userWallets[index].balance ? 'empty':''}
                              `}
                            >
                              <img
                                className="payment-system__img rounded-circle d-inline-block"
                                src={PaymentSystemsIcons[system.payment_alias]} width={44} />
                              <span className="payment-system__title d-block text-dark ui-fz-14">
                            {system.payment}
                          </span>
                            </div>
                          </div>
                        )

                      })

                    }
                  </div>
                  <label className={((payment_alias === 'bonus') ? 'd-none'  : '') + " custom-control custom-control_left custom-checkbox pl-3 ui-fz-14 cu-pointer"}>
                    <WithFormsyCheckbox
                      name='activateFromBalance'
                      className="custom-control-input"
                      value={payment_alias === 'bonus'}

                    >
                      <div className="custom-control-indicator custom-control-indicator_success" />
                      <div className="custom-control-description text-info ui-fz-14 pl-1">
                        <span className="mr-1">Pay from my account balance</span>
                      </div>
                    </WithFormsyCheckbox>
                  </label>
                  <label className="form-group d-block"><span className="d-block text-secondary ui-fz-14">Amount</span>
                    <WithFormsyInput
                      required
                      validations={{
                        isNumeric: true,
                        minValue: minDepositValue,
                        maxValue: maxDepositValue
                      }}
                      validationErrors={{
                        isNumeric: 'Not valid value',
                        minValue: `The value should be greater then ${minDepositValue}`,
                        maxValue: `Limit is ${maxDepositValue}`
                      }}
                      name='initial_money'
                      className="form-control form-control-lg text-dark w-100"
                    />
                  </label>
                </div>
                <div className="modal-footer">
                  <button
                    className="btn btn-success btn-lg w-100"
                    type="submit"
                    disabled={!canSubmit}
                  >
                    ACTIVATE
                  </button>
                </div>
              </div>
          </Formsy>
          <form
            action='https://wallet.advcash.com/sci/'
            method='POST'
            className='d-none'
            ref={el=> this.hiddenForm = el}>
            {
              formInputs &&
              Object.keys(formInputs).map( key =>{
                return(
                  <input
                    // type="hidden"
                    type="text"
                    name={key}
                    value={formInputs[key]} key={key}/>
                )
              })
            }
            <button type={'submit'} ref={el=> this.hiddenFormSubmit = el} > Submit </button>
          </form>
        </Modal>
      </div>

    )
  }
}


ProfileDeposits.contextTypes = {
  router: PropTypes.shape({}),
};

function mapStateToProps(state) {
  const { loggingIn } = state.authentication;
  return {
    userDeposits: state.userDeposits,
    userWallets: state.userWallets,
    tradePlans: state.tradePlans
  };
}

const connectedProfileHeader = connect(mapStateToProps, {
  fetchUserWallets: userActions.fetchUserWallets,
  fetchUserData: userActions.fetchUserData,
  fetchUserDeposits: userActions.fetchUserDeposits,
  activatePlan: userActions.activatePlan,
  activatePlanFromBalance: userActions.activatePlanFromBalance,
  dispatchRequestInProcess: requestActions.dispatchRequestInProcess
})(ProfileDeposits);

export default connectedProfileHeader;
