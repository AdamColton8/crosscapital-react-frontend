import React,{ Component } from 'react'
import { userActions } from "_actions";
import { connect } from "react-redux";
import PropTypes from 'prop-types'
import * as api from "_services";
import icoPerfect_money from "img/icons/pay-systems/pm.png"
import icoAdvanced_cash from "img/icons/pay-systems/adv_cash.png"
import icoPayeer from "img/icons/pay-systems/py.png"
import { alertActions } from '_actions';
import WithFormsyInput from "_components/WithFormsyInput";
import Formsy from 'formsy-react';

let PaymentSystemsIcons = {
  perfect_money: icoPerfect_money,
  advanced_cash: icoAdvanced_cash,
  payeer: icoPayeer
};



class ProfileSettingsWallets extends Component {
  constructor(props) {
    super(props);

    this.initialWalletData = {
      payment_alias: "",
      wallet_key: '',
      wallet_name: ''
    };
    // reset login status
    this.state = {
      formValues: {},
      walletData: this.initialWalletData,
      submitted: false
    };

    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  componentDidUpdate(prevProps){
    if (this.props.userData.wallet.length && !prevProps.userData.wallet.length) {
      let wallet = this.props.userData.wallet[0];

      this.setState({
        formValues: {
          wallet_key: wallet.wallet_key,
            wallet_name: wallet.wallet_name
        },
        walletData: Object.assign(
          this.state.walletData,
          {
            payment_alias: wallet.payment_alias,
            wallet_key: wallet.wallet_key,
              wallet_name: wallet.wallet_name
          })
      })
    }
  }

  componentDidMount(){
    if (this.props.userData.wallet.length) {
      this.setState({
        walletData: Object.assign({}, this.state.walletData, { payment_alias: this.props.userData.wallet[0].payment_alias })
      })
    }
  }

  handlePlanSystemChange = (system) =>{
    let newWalletData = {
      payment_alias: system.payment_alias,
      wallet_key: system.wallet_key,
        wallet_name: system.wallet_name
    };
    let walletData = Object.assign(this.state.walletData, newWalletData);
    this.setState({
      walletData
    })
  };

  resetField=()=>{
    this.setState({
      walletData: this.initialWalletData
    })
  };

  handleSubmit = (values) => {
    let _this = this;
    let form = {...this.state.formValues};
    form.payment_alias = _this.state.walletData.payment_alias;
    api.userService.changeWallet(form)
      .then(response => {
        this.props.dispatch(alertActions.success(`Wallet (${_this.state.walletData.payment_alias}) change request was sanded`));
      })
      .catch(error => {
        this.props.dispatch(alertActions.error('Something went wrong'));
      });
  };

  handleChange(e) {
    let value = e.target.value;
    this.setState({
      walletData: Object.assign({}, this.state.walletData, { wallet_id: value })
    });
  }

  setValuesToLocalState = (currentValues, isChanged) => {
    if (isChanged) {
      this.setState({
        formValues: currentValues
      });
    }
  };

  enableButton = () => {
    this.setState({ canSubmit: true });
  };

  disableButton = () => {
    this.setState({ canSubmit: false });
  };

  render() {
    let {
      state: {
        walletData,
        formValues
      },
      props: {
        userData: {
          wallet: wallets
        }
      },
      handlePlanSystemChange,
      handleChange,
      resetField,
      handleSubmit,
      enableButton,
      disableButton,
      setValuesToLocalState
    } = this;
    return (

      <div className='row'>
        <div className="col-12">
          <div className="ui-fz-28 mb-2 font-weight-light mb-3"> Your e-wallets </div>
          {/*<p className="text-secondary ui-fz-14 mb-4"> After your term deposit period is finished you'll be able to access your money and the interest you've earned.  </p>*/}
          <Formsy
            onSubmit={handleSubmit}
            onValid={enableButton}
            onInvalid={disableButton}
            onChange={setValuesToLocalState}
          >
            <div className="payment__systems form-row">
              {
                wallets.length && wallets.map((system, index)=>{
                  return(
                      system.payment_alias === 'advanced_cash' ? '' :
                    <div
                      className="col-12 col-sm-4 payment-system__block"
                      key={index}
                      onClick={()=>{
                        handlePlanSystemChange(system)
                      }}
                    >
                      <div
                        className={`h-100 payment-system__wrap text-center  d-flex align-items-center flex-column
                          ${walletData.payment_alias === system.payment_alias ? 'active':''}
                        `}
                      >
                        <img
                          className="payment-system__img rounded-circle d-inline-block"
                          src={PaymentSystemsIcons[system.payment_alias]} widtwallet_keyh={44} />
                        <span className="payment-system__title d-block text-dark ui-fz-14">
                      {system.name}
                    </span>
                      </div>
                    </div>
                  )
                })
              }
            </div>
            <div className="form-group">
                <span className="d-block mb-1 text-light-grey ui-fz-14 font-weight-medium">Wallet number</span>
              <WithFormsyInput
                initialValue={walletData.wallet_key}
                required
                name='wallet_key'
                className="form-control mb-2"
              />
                <span className="d-block mb-1 text-light-grey ui-fz-14 font-weight-medium">Wallet name</span>
                <WithFormsyInput
                    initialValue={walletData.wallet_name}
                    required
                    name='wallet_name'
                    className="form-control"
                />
            </div>
            <div className="row">
              <div className="col-6 col-md-3 mx-auto">
                <button
                  // className={`btn w-100 font-weight-bold btn-lg ${!walletData.wallet_id || !walletData.payment_alias ? 'btn-disabled' : 'btn-success'}`}
                  className={`btn w-100 font-weight-bold btn-lg btn-success`}
                  type="submit"
                  style={{marginBottom: 14}}
                  // disabled={!walletData.wallet_key || !walletData.payment_alias || formValues.wallet_key === walletData.wallet_key}
                  // disabled={!walletData.wallet_key || !walletData.payment_alias}
                >
                  Save
                </button>
              </div>
              {/*<div className="col-6 col-md-3 ml-auto">*/}
                {/*<button className="btn btn-outline-light w-100 font-weight-bold btn-lg text-dark border"*/}
                        {/*type="reset"*/}
                        {/*onClick={resetField}*/}
                        {/*style={{marginBottom: 14}}>Cancel*/}
                {/*</button>*/}
              {/*</div>*/}
            </div>
          </Formsy>
        </div>
      </div>

    )
  }
}


ProfileSettingsWallets.contextTypes = {
  router: PropTypes.shape({}),
};

function mapStateToProps(state) {
  return {
    userData: state.userData
  };
}

const _ProfileSettingsWallets = connect(mapStateToProps)(ProfileSettingsWallets);

export default _ProfileSettingsWallets;
