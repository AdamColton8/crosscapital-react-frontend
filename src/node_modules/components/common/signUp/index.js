import React, {Component} from 'react';
import {connect} from "react-redux";
import {authActions} from "_actions/auth.actions";
import {ValidatedCheckbox, ValidatedInput} from '_components'
import {BaseForm as ValidatedForm} from '_packages/validify'
import * as R from 'ramda'
import PropTypes from 'prop-types'
import {Link} from "react-router";
import Formsy from 'formsy-react';
import WithFormsyInput from "_components/WithFormsyInput";
import WithFormsyCheckbox from "_components/WithFormsyCheckbox";
import PopupTerms from "components/common/popup/popupTerms";


class SignUp extends Component {
    constructor(props) {
        super(props);

        this.state = {
            canSubmit: false,
            submitted: false
        };
    }

    handleChange(values) {
        this.setState({formValues: values.values});
    }

    handleCheckboxChange(value) {
        let newFalues = R.merge(this.state.formValues, {})
    }

    handleErrorChange(errors) {
        const newErrors = R.merge(this.state.formErrors, errors.errors);
        this.setState({formErrors: newErrors});
    }


    componentWillMount() {
    }

    componentDidMount() {
        const {dispatch} = this.props;
        dispatch(authActions.logout());

        // если это реферальная ссылка на регистрацию
        let ref_link = this.props.routing.locationBeforeTransitions.query.ref;
        this.setState({
            ref_link: ref_link
        })
    }

    handleSubmit = (data) => {
        let _this = this;
        let {
            state: {
                ref_link
            },
            props: {
                dispatch
            }
        } = _this;

        if (_this.state.ref_link) {
            data = Object.assign({}, data, {ref_link})
        }
        this.setState({submitted: true});
        const {formValues} = this.state;

        dispatch(authActions.register(data))
            .then(response => {
                _this.context.router.push('/auth/login');
            })
            .catch(error => {
            });
    };

    enableButton = () => {
        this.setState({canSubmit: true});
    };

    disableButton = () => {
        this.setState({canSubmit: false});
    };

    render() {
        let {
            props: {
                registering
            },
            state: {
                formValues,
                formErrors,
                canSubmit
            },
            handleSubmit,
            submit,
            enableButton,
            disableButton
        } = this;
        return (
            <div>
                <div className="mobile__menu"/>
                <div className="sign-up__block ov-h" id="signUpBlock">
                    <div className="container">
                        <div className="row mb-5">
                            <div className="col-12 text-center">
                                <div className="h2 mb-2 font-weight-light">Sign up now for trading <br/> opportunity
                                </div>
                                <p className="mb-0 text-light-grey">We had the ambition to make a platform <br/> that
                                    would help people</p>
                            </div>
                        </div>
                        <div className="row position-relative">
                            <div className="squares__left"><span/></div>
                            <div className="squares__right"><span/></div>
                            <div className="col-10 col-md-6 col-lg-4 mx-auto">
                                <Formsy
                                    onSubmit={handleSubmit}
                                    onValid={enableButton}
                                    onInvalid={disableButton}
                                >
                                    {/*<label className='form-group d-block'>*/}
                                    {/*<span className="d-block mb-1 text-light-grey ui-fz-14 font-weight-medium">First name</span>*/}
                                    {/*<WithFormsyInput*/}
                                    {/*// defaultValue={formValues.first_name}*/}
                                    {/*validations={{}}*/}
                                    {/*validationErrors={{}}*/}
                                    {/*required*/}
                                    {/*name='first_name'*/}
                                    {/*placeholder="First name"*/}
                                    {/*className="form-control form-control-lg mb-2"*/}
                                    {/*/>*/}
                                    {/*</label>*/}
                                    {/*<label className='form-group d-block'>*/}
                                    {/*<span className="d-block mb-1 text-light-grey ui-fz-14 font-weight-medium">Last name</span>*/}
                                    {/*<WithFormsyInput*/}

                                    {/*required*/}
                                    {/*name='last_name'*/}
                                    {/*placeholder="Last name"*/}
                                    {/*className="form-control form-control-lg mb-2"*/}
                                    {/*/>*/}
                                    {/*</label>*/}

                                    <label className='form-group d-block'>
                                        <span
                                            className="d-block mb-1 text-light-grey ui-fz-14 font-weight-medium">Username</span>
                                        <WithFormsyInput
                                            required
                                            name='username'
                                            placeholder="Username"
                                            className="form-control form-control-lg mb-2"
                                        />
                                    </label>
                                    <label className='form-group d-block'>
                                        <span
                                            className="d-block mb-1 text-light-grey ui-fz-14 font-weight-medium">Email</span>
                                        <WithFormsyInput
                                            validations={{
                                                isEmail: true
                                            }}
                                            validationErrors={{
                                                isEmail: 'The field value is not a valid email address'
                                            }}
                                            required
                                            name='email'
                                            placeholder="Email"
                                            className="form-control form-control-lg mb-2"
                                        />
                                    </label>
                                    <label className='form-group d-block'>
                                        <span
                                            className="d-block mb-1 text-light-grey ui-fz-14 font-weight-medium">Password</span>
                                        <WithFormsyInput
                                            // defaultValue={formValues.first_name}
                                            validations={{
                                                minLength: 6
                                            }}
                                            validationErrors={{
                                                minLength: 'The password min length 6'
                                            }}
                                            required
                                            type='password'
                                            name='password'
                                            placeholder="Password"
                                            className="form-control form-control-lg mb-2"
                                        />
                                    </label>
                                    <label className='form-group d-block'>
                                        <span className="d-block mb-1 text-light-grey ui-fz-14 font-weight-medium">Retype password</span>
                                        <WithFormsyInput
                                            // defaultValue={formValues.first_name}
                                            validations={{
                                                equalsField: 'password'
                                            }}
                                            validationErrors={{
                                                equalsField: "The password confirmation doesn't match"
                                            }}
                                            required
                                            type='password'
                                            name='password_confirmation'
                                            placeholder="Retype password"
                                            className="form-control form-control-lg mb-2"
                                        />
                                    </label>
                                    {/*<label className='form-group d-block'>*/}
                                    {/*<span className="d-block mb-1 text-light-grey ui-fz-14 font-weight-medium">Secret question</span>*/}
                                    {/*<WithFormsyInput*/}
                                    {/*required*/}
                                    {/*name='question'*/}
                                    {/*placeholder="Secret question"*/}
                                    {/*className="form-control form-control-lg mb-2"*/}
                                    {/*/>*/}
                                    {/*</label>*/}
                                    {/*<label className='form-group d-block'>*/}
                                    {/*<span className="d-block mb-1 text-light-grey ui-fz-14 font-weight-medium">Secret answer</span>*/}
                                    {/*<WithFormsyInput*/}
                                    {/*required*/}
                                    {/*name='answer'*/}
                                    {/*placeholder="Secret answer"*/}
                                    {/*className="form-control form-control-lg mb-2"*/}
                                    {/*/>*/}
                                    {/*</label>*/}
                                    <div id="modalTerms" style={{display: this.state.showStore ? 'block' : 'none'}}>
                                        <div className="modal-terms">
                                            <div className="modal-content-terms mb-5">
                                                <span className="closePopupCert cursor-pointer"
                                                      onClick={popupTermsClose}>&times;</span>

                                                <h4>TERMS AND AGREEMENTS</h4>
                                                <h4 className="mt-3">GENERAL PROVISIONS</h4>
                                                <p>1.1. By registering with us You agree to these rules in
                                                    full.</p>

                                                <p>1.2. Become an Investor unless you are the one who is an
                                                    adult according to the laws
                                                    of the country where he resides at the time of
                                                    registration.</p>

                                                <p>1.3. Full access to all site services will be available only
                                                    after the Investor will
                                                    be registered on the site.</p>

                                                <p>1.4. All technical elements provided for the implementation
                                                    of an Investor's
                                                    financial activities are the property of the Company and may
                                                    only be used for its
                                                    intended purpose.</p>

                                                <h4 className="mt-3">THE RIGHTS AND OBLIGATIONS OF THE USER</h4>
                                                <p>2.1. The company guarantees full confidentiality of all
                                                    information received from
                                                    the Investor, except when disclosure of this information is
                                                    necessary to resolve
                                                    disputes.</p>

                                                <p>2.2. The company reserves the right without explanation to
                                                    refuse to the Investor
                                                    the registration.</p>

                                                <p>2.3. The company does not bear material and other
                                                    responsibility to the Investor, if
                                                    he has suffered material damage by third persons for his own
                                                    fault.</p>

                                                <p>2.4. The company undertakes to provide investors
                                                    uninterrupted operation of all
                                                    services of the site.</p>
                                                <h4 className="mt-3">THE RIGHTS AND OBLIGATIONS OF
                                                    ADMINISTRATION</h4>
                                                <p>3.1. A prerequisite for the commencement of cooperation with
                                                    the Company completed
                                                    by the Investor of the procedure registration at the
                                                    website.</p>

                                                <p>3.2. During the registration process, the Investor must
                                                    specify only valid data.</p>

                                                <p>3.3. Account registration is only allowed under condition
                                                    that the Investor opens
                                                    the account on your name. Registration of an account in the
                                                    name of other persons,
                                                    as well as the performance of investment activities on
                                                    account of third parties is
                                                    strictly prohibited.</p>

                                                <p>3.4. Multiple registration accounts by a single Investor is
                                                    expressly prohibited. In
                                                    case of detection of such chains, the administration has the
                                                    full right to remove,
                                                    block or fine a user.</p>

                                                <p>3.5. The Deposit and withdrawal of funds can only be done
                                                    with accounts that are
                                                    registered by the Investor.</p>

                                                <p>3.6. Violation of any of the paragraphs of the Agreement can
                                                    lead to full blocking
                                                    of the account of the Investor.</p>
                                                <h4 className="mt-3">PAYMENTS</h4>
                                                <p>4.1 Users may make a contribution in the amount from 10.00
                                                    EUR with the following
                                                    payment systems: Payeer, PerfectMoney, AdvCash.</p>

                                                <p>4.2 the Minimum amount of withdrawal from the system is:
                                                    10.00 EUR.</p>
                                                <p>4.3 the Commission for the withdrawal of funds is 1.99% of
                                                    output by the user
                                                    amount.</p>
                                                <p>4.4 withdrawals is a manual process. Regulation of payments
                                                    from 15 minutes to 24
                                                    hours Monday to Friday</p>
                                                <p>4.5 Applications for withdrawal are accepted around the
                                                    clock.</p>
                                                <p>4.6 In case of providing inaccurate, incomplete data about
                                                    the system output by the
                                                    client, the withdrawal does not occur, and the request for
                                                    withdrawal is rejected to
                                                    correct or clarify all inaccuracies and data.</p>
                                                <h4 className="mt-3">SECURITY</h4>
                                                <p>5.1. The company undertakes to ensure security of work and
                                                    for this we use modern
                                                    technologies and services.</p>
                                                <p>5.2. The company is not responsible if caused by the client
                                                    his / her personal data
                                                    (login, password, etc.) is disclosed to third parties.</p>
                                                <a className="btn btn-primary mt-5 text-white" onClick={popupTermsClose}>Close</a>
                                            </div>

                                        </div>
                                    </div>
                                    <label
                                        className="custom-control custom-control_left custom-checkbox pl-3 ui-fz-14 cu-pointer">
                                        <WithFormsyCheckbox
                                            required
                                            name='privacy_terms'
                                            className="custom-control-input"
                                            id='checkbox_privacy_terms'
                                        >
                                            <div className="custom-control-indicator custom-control-indicator_success"/>
                                            <div className="custom-control-description text-light-grey pl-1">
                                                <span className="mr-1">I agree with</span>
                                                <a onClick={popupTerms}
                                                   className="link-tdu text-light-grey font-weight-bold popupTerms"
                                                   href="#" id="popupTerms">Terms and conditions</a>
                                            </div>

                                        </WithFormsyCheckbox>
                                        {/*<input className="custom-control-input" type="checkbox"  name="privacy_terms" onChange={this.handleCheckboxChange} checked={formValues.privacy_terms}/>*/}
                                    </label>
                                    {/*<button submit 11.28.18*/}
                                    <button
                                        // onClick={this.handleSubmit}
                                        className="btn btn-success w-100 font-weight-bold btn-lg"
                                        type="submit"
                                        disabled={!canSubmit}
                                        style={{marginBottom: 14}}>Sign up
                                    </button>
                                </Formsy>
                                <p className="mb-0 text-center">
                                    <span className="text-light-grey">Already have an account? </span>
                                    <Link to='/auth/login'
                                          className='text-dark-gray font-weight-bold link-tdu'> Login</Link>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        )
    }
}

function popupTerms() {
    document.getElementById("modalTerms").style.display = "block";
}

function popupTermsClose() {
    document.getElementById("modalTerms").style.display = "none";
}


SignUp.contextTypes = {
    router: PropTypes.shape({}),
};

function mapStateToProps(state) {
    return {
        routing: state.routing,
        registering: state.registration
    };
}

const connectedRegisterPage = connect(mapStateToProps)(SignUp);
export default connectedRegisterPage;
