import React, { Component } from 'react'
import { Link } from 'react-router'
import {connect} from "react-redux"
import {authActions} from "_actions/auth.actions"
import { ValidatedInput } from '_components'
import { BaseForm as ValidatedForm} from 'react-validify'
import * as R from 'ramda'
import helperFunctions from '_helpers/functions'
import PropTypes from 'prop-types'
import Formsy from 'formsy-react';
import WithFormsyInput from "_components/WithFormsyInput";

class Login extends Component {
  constructor(props) {
    super(props);

    // reset login status
    this.state = {
      canSubmit: false,
      submitted: false
    };

  }

  handleChange = (values) => {
    this.setState({ formValues: values.values });
  }

  handleErrorChange(errors) {
    const newErrors  = R.merge(this.state.formErrors, errors.errors);
    this.setState({ formErrors: newErrors });
  }

  handleSubmit = (formValues) => {
    let _this = this;
    this.setState({ submitted: true });
    const { login } = this.props;
    login(formValues)
      .then(response => {
        _this.context.router.push('/profile');
      })
      .catch(error => {
      });
  };

  componentWillMount() {
    if (this.props.authentication.loggedIn) {
      this.context.router.push('/profile')
    }
  }

  componentDidUpdate(){
    if (this.props.authentication.loggedIn) {
      this.context.router.push('/profile')
    }
  }

  enableButton = () => {
    this.setState({ canSubmit: true });
  };

  disableButton = () => {
    this.setState({ canSubmit: false });
  };

  render() {
    let {
      props: {
        loggingIn
      },
      state: {
        canSubmit
      },
      handleSubmit,
      disableButton,
      enableButton
    } = this;
    return (
      <div className="container">
        <div className="row mb-5">
          <div className="col-12 text-center">
            <div className="h2 mb-2 font-weight-light">Login to your account</div>
            <p className="mb-0 text-light-grey">We had the ambition to make a platform <br/> that would help people</p>
          </div>
        </div>
        <div className="row position-relative">
          <div className="squares__left"><span/></div>
          <div className="squares__right"><span/></div>
          <div className="col-10 col-md-6 col-lg-4 mx-auto">
            <Formsy
              onSubmit={handleSubmit}
              onValid={enableButton}
              onInvalid={disableButton}
            >
              <WithFormsyInput
                required
                name='username'
                placeholder="Username"
                className="form-control form-control-lg mb-2"
              />
              <WithFormsyInput
                required
                name='password'
                type='password'
                placeholder="Password"
                className="form-control form-control-lg mb-2"
              />
              <button
                className="btn btn-success w-100 font-weight-bold btn-lg"
                type="submit"
                disabled={!canSubmit}
                style={{marginBottom: 14}}
              >
                Log in
              </button>
            </Formsy>
            <div className='form-group d-block'>

            </div>
            {/*<MyValidationInput type="text" name='email' placeholder="Email" validations={[required]} />*/}

            {/*<input className="form-control form-control-lg mb-12" />*/}

            <p className="mb-0 text-center">
              <Link className="text-dark-gray font-weight-bold link-tdu" to='/auth/forgot'>Forgot password</Link>
            </p>
          </div>
        </div>
      </div>
    )
  }
};

Login.contextTypes = {
  router: PropTypes.shape({}),
};

function mapStateToProps(state) {
  return {
    authentication: state.authentication
  };
}

const connectedLoginPage = connect(mapStateToProps,{
  login: authActions.login,
  logout: authActions.logout
})(Login);
export default connectedLoginPage;
