import React, { Component } from 'react';
import { Link } from "react-router";
import { authActions } from "_actions/auth.actions";
import {ValidatedInput} from "_components";
import { BaseForm as ValidatedForm} from 'react-validify'
import * as R from 'ramda'
import {connect} from "react-redux";

class ForgotPassword extends Component {
  constructor(props) {
    super(props);

    // reset login status
    this.props.logout();
    this.state = {
      formValues: {
        email: '',
      },
      formErrors: {
        email: '',
      },
      submitted: false,
      sended: false
    };

    this.initialState = Object.assign({}, this.state);

    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
    this.resetState = this.resetState.bind(this);
  }

  handleChange(values) {
    this.setState({ formValues: values.values });
  }

  handleErrorChange(errors) {
    const newErrors  = R.merge(this.state.formErrors, errors.errors);
    this.setState({ formErrors: newErrors });
  }

  handleSubmit(e) {
    let _this = this;
    this.setState({ submitted: true });
    const { formValues } = this.state;
    const { forgotPassword } = this.props;
    forgotPassword(formValues)
      .then(response => {
        _this.setState({
          sended: true
        });
      })
      .catch(error => {
      });
  }
  resetState(){
    this.setState(this.initialState);
  }

  render() {
    const { loggingIn } = this.props;
    const { formValues, formErrors, sended } = this.state;
    const renderBlock = () => {
      if (sended) {
        return (
          <div>
            <p className="mb-0 alert alert-info">
              The activation link was sent to your email. <span className='cu-pointer text-primary' onClick={this.resetState}> Retry </span>
            </p>
          </div>
        )
      } else {
        return (
          <ValidatedForm
            rules={{
              email: 'required|email',
            }}
            onValues={values => this.handleChange({ values })}
            onErrors={errors => this.handleErrorChange({ errors })}
            errors={formErrors}
            values={formValues}
          >
            <ValidatedInput
              error={formErrors.password}
              className="form-control form-control-lg mb-2" name='email' type="text" placeholder="Email"
            />
            <button submit  onClick={this.handleSubmit} className="btn btn-success w-100 font-weight-bold btn-lg" type="button" style={{marginBottom: 14}}>
              Change password
            </button>
            <p className="mb-0 text-center">
              <Link className="text-dark-gray font-weight-bold link-tdu" to='/login'>Cancel</Link>
            </p>
          </ValidatedForm>
        )
      }
    }

    return (
      <div className="container">
        <div className="row mb-5">
          <div className="col-12 text-center">
            <div className="h2 mb-2 font-weight-light">Password recover</div>
            <p className="mb-0 text-light-grey"> Please enter your email to <br/> receive password reset link </p>
          </div>
        </div>
        <div className="row position-relative">
          <div className="squares__left"><span /></div>
          <div className="squares__right"><span /></div>
          <div className="col-10 col-md-6 col-lg-4 mx-auto">
            {
              renderBlock()
            }
          </div>
        </div>
      </div>
    )
  }
}


function mapStateToProps(state) {
  return {
  };
}

const connectedForgotPassword = connect(mapStateToProps, {
  forgotPassword: authActions.forgotPassword,
  logout: authActions.logout
})(ForgotPassword);
export default connectedForgotPassword;
