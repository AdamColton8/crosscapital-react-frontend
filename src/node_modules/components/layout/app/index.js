import React, { Component } from 'react';
import { Router, Route, IndexRedirect, IndexRoute } from 'react-router'

import Header from "components/layout/header/index";
import Footer from "components/layout/footer/index";
import {connect} from "react-redux";
import {alert} from "_reducers/alert.reducer";
import {alertActions} from "_actions";
import {Loader} from "_components";
import Login from "components/common/login/login/index";
import LoginWrapper from "components/common/login/index";
import ForgotPassword from "components/common/login/forgot/index";
import Landing from "components/common/landing/index";
import Faq from "components/common/faq/index";
import {history} from "store";
import ResetPassword from "components/common/login/passReset/index";
import ProfileWrapper from "components/layout/profile/index";
import Banners from "components/common/banners/index";
import BaseWrapper from "components/layout/base/index";
import SignUp from "components/common/signUp/index";
import Page404 from "components/404/index";
import ProfileDeposits from 'components/profile/deposits/index'
import ProfileWithdrawals from 'components/profile/withdraws'
import ProfileReferrals from 'components/profile/referrals'
import Support from 'components/support'
import ProfileSettings from 'components/profile/profileSettings'

import {tradePlansActions} from '_actions'


import 'react-rangeslider/lib/index.css'
import {appStatus} from "_reducers/appStatus.reducer";

const routes = [
  {
    path: '/profile',
    component: ProfileWrapper,
    indexRoute: { component: ProfileDeposits },
    childRoutes: [
      { path: 'deposits', component: ProfileDeposits },
      { path: 'withdrawals', component: ProfileWithdrawals },
      { path: 'referrals', component: ProfileReferrals },
      { path: 'settings', component: ProfileSettings },
    ]
  },
  {
    path: '/',
    component: BaseWrapper,
    indexRoute: { component: Landing },
    childRoutes: [
      { path: 'banners', component: Banners },
      { path: 'support', component: Support },
      { path: 'faq', component: Faq },
      {
        path: 'auth',
        component: LoginWrapper,
        indexRoute: { component: Login },
        childRoutes: [
          {
            path: 'login',
            component: Login
          },
          {
            path: 'forgot',
            component: ForgotPassword
          },
          {
            path: 'reset',
            component: ResetPassword
          },
          {
            path: 'sign-up',
            component: SignUp
          }
        ]
      },
      { path: '*', component: Page404, exact: true },
    ]
  },
];

class AppWrapper extends Component {
  constructor(props) {
    super(props);
    this.alertTimeout = null;
  }

  componentWillMount(){
    this.fetchTradePlans();
  }

  fetchTradePlans(){
    let _this = this;
    this.props.fetchPlans()
      .catch(error => {
        _this.fetchTradePlans();
      });
  }

  componentWillUnmount(){
    clearTimeout(this.alertTimeout);
  }

  renderAlert(){
    let _this = this;
    if (this.props.alert.message) {
      this.alertTimeout = setTimeout(()=>{
        _this.props.clearAlerts();
      },2000);
    }
    return (
      <div className='pageStatusBlock'>
        <div className={`alert requestAlerts ${this.props.alert.type} ${this.props.alert.message ? 'show' : ''}`}> { this.props.alert.message } </div>
        { this.props.requestStatus && <Loader /> }
      </div>
    )
  }

  render() {
    let { appStatus } = this.props;
    return (
      <div
        className={`maincontent ${appStatus.profileSidebar ? 'sidebar_enabled': ''}`}
      >
        { this.renderAlert() }
        <Router history={history} routes={routes}/>
      </div>
    )
  }
}


function mapStateToProps(state) {
  return {
    alert: state.alert,
    requestStatus: state.requestStatus,
    appStatus: state.appStatus,

  };
}

const _AppWrapper = connect(mapStateToProps,{
  fetchPlans: tradePlansActions.fetch,
  clearAlerts: alertActions.clear
})(AppWrapper);
export default _AppWrapper;
