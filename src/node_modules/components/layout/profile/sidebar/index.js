import React, {Component} from 'react'
import {Link} from "react-router";
import {appStatusActions, authActions} from '_actions'
import {Dropdown, DropdownItem, DropdownMenu, DropdownToggle} from 'reactstrap'
import img_noAvatar from "img/profile/avatar.jpg"
import {connect} from "react-redux";
import {Modal} from "reactstrap";
import ProfitCalculator from 'components/profitCalculator'
import copy from 'copy-to-clipboard';
import { userService } from '_services/index';
import { alertActions } from '_actions'

class ProfileSidebar extends Component{
  constructor(props) {
    super(props);

    this.state = {
      modalCalc: false,
      profileDropdownFlag: false,
      referralLink: false
    };

    this.toggleModal = this.toggleModal.bind(this);

    this.sidebarFunc(window.innerWidth);
    this.setListeners();
    this.toggleSidebar = this.toggleSidebar.bind(this);
    this.toggleDropdown = this.toggleDropdown.bind(this);
    this.handleLogOutRequest = this.handleLogOutRequest.bind(this);
  }

  setListeners(){ // мониторим ресайз окна браузера
    let _this = this;
    window.addEventListener("resize", (event)=>{
      event.preventDefault();
      _this.sidebarFunc(window.innerWidth);
      return false;
    })
  }

  sidebarFunc(screenWidth){ // проверка расширения екрана
    if (screenWidth >= 950) {
      this.props.toggleProfileSidebar(false);
    }
  }

  toggleSidebar(){ // тоглим состояние менюшки
    this.props.toggleProfileSidebar(!this.props.appStatus.profileSidebar);
  }

  componentWillUnmount(){
    this.props.toggleProfileSidebar(false);
  }

  toggleModal(modal){
    this.setState({
      [modal]: !this.state[modal]
    })
  }

  toggleDropdown() {
    this.setState({
      profileDropdownFlag: !this.state.profileDropdownFlag
    })
  };

  handleLogOutRequest = (e)=>{
    e.preventDefault();
    this.props.logoutAction();
    this.toggleDropdown();
  };

  copyReferralLink = () => {
    if (this.props.userData.id) {
      copy(window.location.origin+`/auth/sign-up?ref=${this.props.userData.ref_link}`);
      this.props.alertSuccess('Copied to your clipboard')
    } else {
      this.props.alertError('You have no referral link yet')
    }
  };

  render(){
    let {
      toggleSidebar,
      toggleModal,
      toggleDropdown,
      handleLogOutRequest,
      copyReferralLink,
      state: {
        profileDropdownFlag
      }
    } = this;
    let { userData } = this.props;
    let { modalCalc } = this.state;
    return (
      <div className="profile-sidebar h-100 col-lg-3">
        <div className="sidebar__init" id="js_sidebar-btn" onClick={toggleSidebar}>
          <div className="action_btn">
            <div className="first">x</div>
            <div className="second"/>
            <div className="third"/>
          </div>
        </div>
        <div className="inner mx-auto">
          <Link className="d-block text-info ui-fz-20 font-weight-bold mb-4 text-decoration-none" to={'/'}>
            <span className="text-success">Cross</span>
            <span className="text-warning text-uppercase"> / capital </span>
          </Link>
          {/*<a >*/}
            {/*<div className="avatar-wrap mr-3"><img className="rounded-circle" src={img_noAvatar} width={40}/>*/}
            {/*</div>*/}
            {/*<span className="username mr-1 d-inline-block">{userData.username}</span>*/}
            {/*<svg className="arr_d" width={12} height={7}>*/}
              {/*<use xlinkHref="#svg_arr_d" xmlnsXlink="http://www.w3.org/1999/xlink" style={{fill: '#08BF40'}}/>*/}
            {/*</svg>*/}
          {/*</a>*/}
          <Dropdown group isOpen={profileDropdownFlag} size="lg" toggle={toggleDropdown}>
            <DropdownToggle className="user__block d-flex align-items-center text-dark" href="#" tag="a" onClick={toggleDropdown}>
              <div className="avatar-wrap mr-3"><img className="rounded-circle" src={img_noAvatar} width={40}/>
              </div>
              <span className="username mr-1 d-inline-block">{userData.username}</span>
              <svg className="arr_d" width={12} height={7}>
                <use xlinkHref="#svg_arr_d" xmlnsXlink="http://www.w3.org/1999/xlink" style={{fill: '#08BF40'}}/>
              </svg>
            </DropdownToggle>
            <DropdownMenu>
              <Link to={'/profile/settings'} className={'text-dark cu-pointer dropdown-item'}> Settings </Link>
              <DropdownItem onClick={handleLogOutRequest} className={'cu-pointer'}> Logout </DropdownItem>
            </DropdownMenu>
          </Dropdown>
          <ul className="profile__menu">
            <li className="profile__menu-item">
              <Link className="profile__menu-link d-flex align-items-center w-100" activeClassName='active' to='/profile/deposits'>
                <div className="ico">
                  <svg className="d-inline-block" width={23} height={14}>
                    <use xlinkHref="#svg_dollar" xmlnsXlink="http://www.w3.org/1999/xlink"/>
                  </svg>
                </div>
                <span>Deposits</span>
              </Link>
            </li>
            <li className="profile__menu-item">
              <Link className="profile__menu-link d-flex align-items-center w-100" activeClassName='active' to='/profile/withdrawals'>
                <div className="ico">
                  <svg className="d-inline-block" width={23} height={14}>
                    <use xlinkHref="#svg_stats" xmlnsXlink="http://www.w3.org/1999/xlink" width={17} height={17}/>
                  </svg>
                </div>
                <span>Withdraws</span>
              </Link>
            </li>
            <li className="profile__menu-item">
              <Link className="profile__menu-link d-flex align-items-center w-100" activeClassName='active' to='/profile/referrals'>
                <div className="ico">
                  <svg className="d-inline-block" width={23} height={14}>
                    <use xlinkHref="#svg_persons" xmlnsXlink="http://www.w3.org/1999/xlink" width={23} height={14}/>
                  </svg>
                </div>
                <span>Referrals</span>
              </Link>
            </li>
            <li className="profile__menu-item">
              <Link className="profile__menu-link d-flex align-items-center w-100" activeClassName='active' to='/faq'>
                <div className="ico">
                  <svg className="d-inline-block" width={17} height={19}>
                    <use xlinkHref="#svg_faq" xmlnsXlink="http://www.w3.org/1999/xlink"/>
                  </svg>
                </div>
                <span>FAQ</span></Link></li>
            <li className="profile__menu-item">
              <Link className="profile__menu-link d-flex align-items-center w-100" activeClassName='active' to='/support'>
                <div className="ico">
                  <svg className="d-inline-block" width={18} height={18}>
                    <use xlinkHref="#svg_settings" xmlnsXlink="http://www.w3.org/1999/xlink" style={{fill: '#CFCFCF'}}/>
                  </svg>
                </div>
                <span>Support</span>
              </Link>
            </li>
          </ul>
          <div className="sidebar__links">
            <a
              className="calculator-link rounded"
              href="#"
              onClick={()=>toggleModal('modalCalc')}
            >
              Calculator
            </a>
            <a
              className="referal-link text-nowrap rounded" href="#"
              onClick={copyReferralLink}
            >
              <svg className="d-inline-block mr-1" width={23} height={14}>
                <use xlinkHref="#svg_persons" xmlnsXlink="http://www.w3.org/1999/xlink" width={23} height={14}
                     style={{fill: '#08bf40'}}/>
              </svg>
              <span>
                Referal link
              </span>
            </a>
          </div>
        </div>
        <Modal isOpen={modalCalc} toggle={()=>toggleModal('modalCalc')}>
          <div className="modal-content">
            <div className="modal-header">
              <h5 className="modal-title">Calculate <br /> something</h5>
              <button className="close" type="button" data-dismiss="modal" aria-label="Close" onClick={()=>toggleModal('modalCalc')}>×</button>
            </div>
            <div className="modal-body ">
              <div className='profit-calculator py-0'>
                <ProfitCalculator/>
              </div>
            </div>
            {/*<div className="modal-footer">*/}
              {/*/!*<button className="btn btn-success btn-lg w-100" type="button" data-dismiss="modal">Calculate</button>*!/*/}
            {/*</div>*/}
          </div>
        </Modal>
      </div>
    )
  }
}


function mapStateToProps(state) {
  const { loggingIn } = state.authentication;
  return {
    appStatus: state.appStatus,
    userData: state.userData
  };
}

const _ProfileSidebar = connect(mapStateToProps,{
  toggleProfileSidebar: appStatusActions.profileSidebar,
  logoutAction: authActions.logoutAction,
  alertSuccess: alertActions.success,
  alertError: alertActions.error,
})(ProfileSidebar);

export default _ProfileSidebar;

