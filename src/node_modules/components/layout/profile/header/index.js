import React, {Component} from 'react'
import {Link} from "react-router";
import {alertActions, userActions} from "_actions";
import {connect} from "react-redux";
import PropTypes from 'prop-types'
import {toFloatNumbers} from '_helpers'
import icoWallet from "img/icons/wallet.png";
import {Modal} from "reactstrap";
import * as R from 'ramda'
import {ValidatedInput} from "_components";
import {BaseForm as ValidatedForm} from 'react-validify'
import Formsy from 'formsy-react';
import WithFormsyInput from "_components/WithFormsyInput";

import icoPerfect_money from "img/icons/pay-systems/pm.png"
import icoAdvanced_cash from "img/icons/pay-systems/adv_cash.png"
import icoPayeer from "img/icons/pay-systems/py.png"
import icoReferrals from "img/icons/pay-systems/people-icon.png"
import icoBonus from "img/icons/pay-systems/bonus.png"

let PaymentSystemsIcons = {
    perfect_money: icoPerfect_money,
    advanced_cash: icoAdvanced_cash,
    payeer: icoPayeer,
    referrals: icoReferrals,
    bonus: icoBonus
};

class ProfileHeader extends Component {
    constructor(props) {
        super(props);
        this.state = {
            canSubmit: false,
            modalReplenish: false,
            withdrawValue: 0,
            withdrawConfig: {
                balance: 15,
                payment_alias: "perfect_money"
            },
            withdrawErrors: {
                balance: ''
            },
            withdrawLimit: 10
        };

        this.toggleModal = this.toggleModal.bind(this);
    }

    toggleModal(modal) {
        this.setState({
            [modal]: !this.state[modal]
        })
    }

    handleWithdrawSystemChange = (alias, maxBalance) => {
        let withdrawConfig = {...this.state.withdrawConfig};
        let withdrawLimit = maxBalance;
        if (!maxBalance) return false;
        withdrawConfig.payment_alias = alias;
        withdrawConfig.balance = withdrawConfig.balance > withdrawLimit ? withdrawLimit : withdrawConfig.balance;
        this.setState({
            withdrawConfig,
            withdrawLimit
        })
    };

    handleChange(values) {
        this.setState({withdrawConfig: values.values});
    }

    handleErrorChange(errors) {
        const newErrors = R.merge(this.state.withdrawErrors, errors.errors);
        this.setState({withdrawErrors: newErrors});
    }

    handleWithdrawRequest = (data) => {
        this.props.withdrawRequest(Object.assign(this.state.withdrawConfig, data))
            .then(
                withdraw => {
                    this.props.fetchUserWallets()
                },
                error => {
                }
            );
        this.toggleModal('modalReplenish');
    };

    enableButton = () => {
        this.setState({canSubmit: true});
    };

    disableButton = () => {
        this.setState({canSubmit: false});
    };

    render() {

        let {
            toggleModal,
            handleWithdrawSystemChange,
            enableButton,
            disableButton,
            handleWithdrawRequest,
            state: {
                modalReplenish,
                withdrawConfig,
                withdrawErrors,
                withdrawLimit,
                canSubmit
            },
            props: {
                userWallets
            }
        } = this;

        let walletBalance = userWallets;
        walletBalance = walletBalance.reduce(function (previousValue, currentValue, index, array) {
            return previousValue + currentValue.balance;
        }, 0);

        return (
            <div className="col-12">
                <div
                    className="profile__stats d-flex ui-fz-18 font-weight-medium align-items-baseline justify-content-between flex-wrap">
                    <div className="balance order-lg-0 order-1 d-flex align-items-end mb-3">
                        <span className="d-inline-block">Current ballance:{'\u00A0'} </span>

                        <a
                            className="d-inline-block text-success value"
                            href="#"
                            onClick={() => toggleModal('modalReplenish')}
                        >
                            {toFloatNumbers(walletBalance)} € {'\u00A0'}
                            <img className="d-inline-block position-relative" src={icoWallet} style={{top: '-2px'}}/>
                        </a>
                        {'\u00A0'}
                        <a onClick={() => toggleModal('modalReplenish')}
                           className='btn btn-success text-white ml-3'>Withdraw</a>
                    </div>
                    <ul className="rewards d-flex align-items-baseline order-lg-2 order-3 flex-wrap">
                        {
                            userWallets.length && userWallets.slice(0, 3).map((wallet, i) => {
                                return (
                                    <li
                                        key={`wallet_${i}`}
                                        className={'reward__item'}
                                    >
                    <span className="img-wrap d-inline-block align-middle mr-2">
                      <img className="d-block" src={PaymentSystemsIcons[wallet.payment_alias]} width={24}/>
                    </span>
                                        <span
                                            className={`d-inline-block align-middle amount ${ wallet.balance ? 'text-dark' : 'text-secondary'}`}>
                      {toFloatNumbers(wallet.balance)} €
                    </span>
                                    </li>
                                )
                            })
                        }

                        {/*// реферальный счет*/}

                        {
                            userWallets.length &&
                            <li
                                className={`reward__item referal-reward`}
                            >
                                {/*<svg className="d-inline-block align-middle mr-2" width={24} height={24}*/}
                                     {/*viewBox="0 0 24 24" version="1.1"*/}
                                     {/*xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink">*/}
                                    {/*<g id="Canvas" transform="translate(-9706 -56)">*/}
                                        {/*<g id="Ellipse">*/}
                                            {/*<use xlinkHref="#path0_fill" transform="translate(9706 56)" fill="#08BF40"/>*/}
                                        {/*</g>*/}
                                        {/*<g id="group - material">*/}
                                            {/*<use xlinkHref="#path1_fill" transform="translate(9710 63)" fill="#FFFFFF"/>*/}
                                        {/*</g>*/}
                                    {/*</g>*/}
                                    {/*<defs>*/}
                                        {/*<path id="path0_fill"*/}
                                              {/*d="M 24 12C 24 18.6274 18.6274 24 12 24C 5.37258 24 0 18.6274 0 12C 0 5.37258 5.37258 0 12 0C 18.6274 0 24 5.37258 24 12Z"/>*/}
                                        {/*<path id="path1_fill" fillRule="evenodd"*/}
                                              {/*d="M 10.8936 5.70447C 11.521 5.70447 12.2181 5.7961 12.985 5.97938C 13.8332 6.19702 14.5245 6.47766 15.059 6.82131C 15.6864 7.23368 16.0001 7.69759 16.0001 8.21306L 16.0001 10L 11.643 10L 11.643 8.21306C 11.643 7.2394 11.1666 6.41467 10.2139 5.73883C 10.3765 5.71592 10.6031 5.70447 10.8936 5.70447ZM 5.10652 5.70447C 5.73394 5.70447 6.42526 5.7961 7.18049 5.97938C 8.02868 6.19702 8.71419 6.47766 9.23704 6.82131C 9.86447 7.23368 10.1782 7.69759 10.1782 8.21306L 10.1782 10L 0 10L 0 8.21306C 0 7.69759 0.313708 7.23368 0.941133 6.82131C 1.47561 6.47766 2.16692 6.19702 3.01511 5.97938C 3.78196 5.7961 4.47909 5.70447 5.10652 5.70447ZM 5.10628 4.29553C 4.72286 4.29553 4.36267 4.19817 4.02572 4.00344C 3.68877 3.80871 3.42154 3.54525 3.22402 3.21306C 3.02649 2.88087 2.92773 2.52578 2.92773 2.14777C 2.92773 1.76976 3.02649 1.41466 3.22402 1.08247C 3.42154 0.750285 3.68877 0.486828 4.02572 0.292096C 4.36267 0.0973645 4.72286 0 5.10628 0C 5.48971 0 5.84699 0.0973645 6.17813 0.292096C 6.50927 0.486828 6.77069 0.747421 6.96241 1.07388C 7.15412 1.40035 7.24997 1.7583 7.24997 2.14777C 7.24997 2.53723 7.15412 2.89519 6.96241 3.22165C 6.77069 3.54811 6.50927 3.80871 6.17813 4.00344C 5.84699 4.19817 5.48971 4.29553 5.10628 4.29553ZM 10.8934 4.29553C 10.51 4.29553 10.1498 4.19817 9.81283 4.00344C 9.47588 3.80871 9.20865 3.54525 9.01113 3.21306C 8.8136 2.88087 8.71484 2.52578 8.71484 2.14777C 8.71484 1.76976 8.8136 1.41466 9.01113 1.08247C 9.20865 0.750285 9.47588 0.486828 9.81283 0.292096C 10.1498 0.0973645 10.51 0 10.8934 0C 11.2768 0 11.637 0.0973645 11.974 0.292096C 12.3109 0.486828 12.5781 0.750285 12.7757 1.08247C 12.9732 1.41466 13.0719 1.76976 13.0719 2.14777C 13.0719 2.52578 12.9732 2.88087 12.7757 3.21306C 12.5781 3.54525 12.3109 3.80871 11.974 4.00344C 11.637 4.19817 11.2768 4.29553 10.8934 4.29553Z"/>*/}
                                    {/*</defs>*/}
                                {/*</svg>*/}
                                <span className="img-wrap d-inline-block align-middle mr-2">
                      <img className="d-block" src={icoBonus} width={24}/>
                    </span>
                                <span
                                    className={`d-inline-block align-middle amount ${ userWallets[3].balance ? 'text-dark' : 'text-secondary'}`}>
                  {toFloatNumbers(userWallets[3].balance)} €
                </span>
                            </li>
                        }

                        {/*// бонусный счет*/}

                        {/*
                            userWallets.length && userWallets[4].balance ?
                                <li className={'reward__item '}>
                                  <span className="img-wrap d-inline-block align-middle mr-2">
                      <img className="d-block" src={icoBonus} width={24}/>
                    </span>
                                    <span className={`d-inline-block align-middle amount text-dark`}>
                      {toFloatNumbers(userWallets[4].balance)} €
                    </span>
                                </li>
                                : ''
                        */}
                        {/*}*/}
                        {/*// бонусный счет*/}

                        {
                            // userWallets.length && userWallets[5].balance  ?
                            //             <li className={'reward__item '}>
                            //                 <span
                            //                     className={'d-inline-block align-middle bonus-ico text-white text-center'}>B</span>
                            //                 <span className={`d-inline-block align-middle amount text-dark`}>
                            //     {toFloatNumbers(userWallets[5].balance)} €
                            //   </span>
                            //             </li>
                            //             : ''
                        }
                        {/*}*/}

                    </ul>
                    {/*<a className="profile__settings order-2 order-lg-3" href="#">*/}
                        {/*<svg className="d-inline-block align-middle" width={20} height={20}>*/}
                            {/*<use xlinkHref="#svg_settings" xmlnsXlink="http://www.w3.org/1999/xlink"*/}
                                 {/*style={{fill: '#C4C4C4'}}/>*/}
                        {/*</svg>*/}
                    {/*</a>*/}
                </div>
                <Modal isOpen={modalReplenish} toggle={() => toggleModal('modalReplenish')}>
                    <Formsy
                        onSubmit={handleWithdrawRequest}
                        onValid={enableButton}
                        onInvalid={disableButton}
                    >
                        <div className="modal-header">
                            <h5 className="modal-title">Withdraw your <br/>money</h5>
                            <button className="close" type="button" data-dismiss="modal" aria-label="Close"
                                    onClick={() => toggleModal('modalReplenish')}>×
                            </button>
                        </div>

                        <div className="modal-body">
                            <div className="modal-body">
                                <div className="text-secondary ui-fz-14">Withdraw from</div>
                                <div className="payment__systems payment__systems_withdraw form-row">

                                    {
                                        userWallets.length && userWallets.slice(0, 3).map((system, index) => {
                                            return (

                                                <div
                                                    className="col-12 col-sm-4 payment-system__block"
                                                    key={`syst_${index}`}
                                                    onClick={() => {
                                                        let k = userWallets.length ? userWallets[index].balance : 0;
                                                        handleWithdrawSystemChange(system.payment_alias, k)
                                                    }}
                                                >

                                                    <div
                                                        className={`h-100 payment-system__wrap text-center  d-flex align-items-center flex-column
                                ${withdrawConfig.payment_alias === system.payment_alias ? 'active' : ''}
                                ${userWallets.length && !userWallets[index].balance ? 'empty' : ''}
                              `}
                                                    >
                                                        <img
                                                            className="payment-system__img rounded-circle d-inline-block"
                                                            src={PaymentSystemsIcons[system.payment_alias]}
                                                            width={44}/>
                                                        <span
                                                            className="payment-system__title d-block text-dark ui-fz-14">{system.payment}</span>
                                                        <span
                                                            className="payment-system__balance d-block text-secondary ui-fz-14 mt-auto font-weight-bold">{userWallets.length && userWallets[index].balance}</span>
                                                    </div>
                                                </div>
                                            )
                                        })
                                    }
                                </div>
                                <div className="text-secondary ui-fz-14 mt-1 mb-3">Withdraws from Monday to Friday
                                    only
                                </div>
                                <label className="form-group d-block"><span
                                    className="d-block text-secondary ui-fz-14">Amount</span>
                                    <WithFormsyInput
                                        required
                                        validations={{
                                            isNumeric: true,
                                            minValue: 1,
                                            maxValue: withdrawLimit
                                        }}
                                        validationErrors={{
                                            isNumeric: 'Not valid value',
                                            minValue: 'The value should be greater then 0',
                                            maxValue: `Limit is ${withdrawLimit}`
                                        }}
                                        name='balance'
                                        className="form-control form-control-lg text-dark w-100"
                                    />
                                </label>
                            </div>
                        </div>
                        <div className="modal-footer">
                            <button
                                className="btn btn-success btn-lg w-100"
                                type="submit"
                                disabled={!canSubmit}
                            >
                                Replenish
                            </button>
                        </div>
                    </Formsy>
                </Modal>
            </div>
        )
    }
}


ProfileHeader.contextTypes = {
    router: PropTypes.shape({}),
};

function mapStateToProps(state) {
    const {loggingIn} = state.authentication;
    return {
        userWallets: state.userWallets
    };
}

const connectedProfileHeader = connect(mapStateToProps, {
    fetchUserData: userActions.fetchUserData,
    withdrawRequest: userActions.withdrawRequest,
    fetchUserWallets: userActions.fetchUserWallets
})(ProfileHeader);
export default connectedProfileHeader;
